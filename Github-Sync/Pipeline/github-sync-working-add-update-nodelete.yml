trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - template: pipeline-variables.yml

jobs:
- job: SyncToGitHub
  steps:
  - checkout: self
    persistCredentials: true
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '5.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: '$(gitHubSC)' # Reference the GitHub service connection
      repositoryName: '$(gitHubRepo)'
      target: '$(gitHubBranch)'
      tagSource: 'manual'
      tag: 'v$(Build.BuildId)'
      title: 'Release $(Build.BuildId)'
      assets: '**/*.zip'
      isDraft: false
      isPreRelease: false
  - script: |
      git config --global user.email "$(gitUserEmail)"
      git config --global user.name "$(gitUserName)"
      git config --global http.postBuffer 1048576000
      git config --global pack.windowMemory "100m"
      git config --global pack.packSizeLimit "100m"
      git config --global pack.threads "1"
      git config --global pull.rebase true
      git remote add github https://$(github_token)@github.com/$(gitHubRepo).git
      git fetch github
      git checkout -b $(gitHubBranch) || git checkout $(gitHubBranch)
      git pull github $(gitHubBranch) --rebase || { 
        echo 'Merge conflict detected'; 
        echo 'Conflicted files:';
        git diff --name-only --diff-filter=U;
        # Resolve conflicts by favoring the Azure DevOps version for all files
        for file in $(git diff --name-only --diff-filter=U); do
          git checkout --theirs $file
          git add $file
        done
        GIT_EDITOR=true git rebase --continue || git rebase --skip
      }

      # Verify if there are still conflicts and exit if conflicts are not resolved
      if git diff --name-only --diff-filter=U | grep -q 'pipelines/github-sync/github-sync.yml'; then
        echo 'Conflict resolution failed for pipelines/github-sync/github-sync.yml'
        exit 1
      fi

      # Explicitly commit the latest version of this pipeline file from Azure DevOps
      git add pipelines/github-sync/github-sync.yml
      git commit -m "Ensure Azure DevOps version of pipeline file" || true
      
      # Remove files from GitHub that are not in Azure DevOps (not working)
      for file in $(git ls-files --deleted); do
        echo $file
        git rm $file
        git commit -m "Remove $file" || true
      done

      # Loop through each new file and commit individually
      for file in $(git ls-files --others --exclude-standard); do
        git add $file
        git commit -m "Add $file" && echo "Added $file" || true
      done
     
      # Loop through each modified file and commit changes individually
      for file in $(git ls-files -m); do
        git add $file
        git commit -m "Update $file" && echo "Updated $file" || true
      done

      git push github $(Build.SourceBranchName):$(gitHubBranch) || { echo 'Git push failed'; exit 1; }
    displayName: 'Sync to GitHub'